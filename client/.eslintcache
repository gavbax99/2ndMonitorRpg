[{"C:\\Users\\Gavin\\Desktop\\2021CODE\\2ndMonitorRpg\\client\\src\\index.js":"1","C:\\Users\\Gavin\\Desktop\\2021CODE\\2ndMonitorRpg\\client\\src\\navigator\\Navigator.js":"2","C:\\Users\\Gavin\\Desktop\\2021CODE\\2ndMonitorRpg\\client\\src\\store\\reducers\\index.js":"3","C:\\Users\\Gavin\\Desktop\\2021CODE\\2ndMonitorRpg\\client\\src\\store\\reducers\\navigationReducer.js":"4","C:\\Users\\Gavin\\Desktop\\2021CODE\\2ndMonitorRpg\\client\\src\\screens\\HomeScreen\\HomeScreen.js":"5","C:\\Users\\Gavin\\Desktop\\2021CODE\\2ndMonitorRpg\\client\\src\\componenets\\QuestCard\\QuestCard.js":"6","C:\\Users\\Gavin\\Desktop\\2021CODE\\2ndMonitorRpg\\client\\src\\componenets\\Sidebar\\Sidebar.js":"7","C:\\Users\\Gavin\\Desktop\\2021CODE\\2ndMonitorRpg\\client\\src\\constants\\Tools.js":"8","C:\\Users\\Gavin\\Desktop\\2021CODE\\2ndMonitorRpg\\client\\src\\store\\actions\\navigationActions.js":"9","C:\\Users\\Gavin\\Desktop\\2021CODE\\2ndMonitorRpg\\client\\src\\componenets\\ProgressBar\\ProgressBar.js":"10","C:\\Users\\Gavin\\Desktop\\2021CODE\\2ndMonitorRpg\\client\\src\\constants\\functions.js":"11","C:\\Users\\Gavin\\Desktop\\2021CODE\\2ndMonitorRpg\\client\\src\\constants\\Materials.js":"12","C:\\Users\\Gavin\\Desktop\\2021CODE\\2ndMonitorRpg\\client\\src\\store\\reducers\\materialReducer.js":"13","C:\\Users\\Gavin\\Desktop\\2021CODE\\2ndMonitorRpg\\client\\src\\store\\actions\\materialActions.js":"14","C:\\Users\\Gavin\\Desktop\\2021CODE\\2ndMonitorRpg\\client\\src\\store\\reducers\\reducer.js":"15","C:\\Users\\Gavin\\Desktop\\2021CODE\\2ndMonitorRpg\\client\\src\\store\\actions\\actions.js":"16","C:\\Users\\Gavin\\Desktop\\2021CODE\\2ndMonitorRpg\\client\\src\\componenets\\questCards\\HeroQuestCard\\HeroQuestCard.js":"17","C:\\Users\\Gavin\\Desktop\\2021CODE\\2ndMonitorRpg\\client\\src\\componenets\\questCards\\QuestProgressBar\\QuestProgressBar.js":"18","C:\\Users\\Gavin\\Desktop\\2021CODE\\2ndMonitorRpg\\client\\src\\screens\\LoadingScreen\\LoadingScreen.js":"19","C:\\Users\\Gavin\\Desktop\\2021CODE\\2ndMonitorRpg\\client\\src\\componenets\\questCards\\HeroQuestContainer\\HeroQuestContainer.js":"20","C:\\Users\\Gavin\\Desktop\\2021CODE\\2ndMonitorRpg\\client\\src\\constants\\Functions.js":"21","C:\\Users\\Gavin\\Desktop\\2021CODE\\2ndMonitorRpg\\client\\src\\componenets\\Sidebar\\SidebarItem.js":"22","C:\\Users\\Gavin\\Desktop\\2021CODE\\2ndMonitorRpg\\client\\src\\constants\\Tokens.js":"23"},{"size":584,"mtime":1611017143625,"results":"24","hashOfConfig":"25"},{"size":731,"mtime":1611373959952,"results":"26","hashOfConfig":"25"},{"size":329,"mtime":1611369879008,"results":"27","hashOfConfig":"25"},{"size":405,"mtime":1611369916428,"results":"28","hashOfConfig":"25"},{"size":1889,"mtime":1611377283079,"results":"29","hashOfConfig":"25"},{"size":965,"mtime":1611018682759,"results":"30","hashOfConfig":"25"},{"size":6826,"mtime":1611462531969,"results":"31","hashOfConfig":"25"},{"size":616,"mtime":1611002765588,"results":"32","hashOfConfig":"25"},{"size":148,"mtime":1611369971245,"results":"33","hashOfConfig":"25"},{"size":7662,"mtime":1611370039982,"results":"34","hashOfConfig":"25"},{"size":426,"mtime":1611006035461,"results":"35","hashOfConfig":"25"},{"size":1683,"mtime":1611440597627,"results":"36","hashOfConfig":"25"},{"size":427,"mtime":1611369830039,"results":"37","hashOfConfig":"25"},{"size":190,"mtime":1611007767668,"results":"38","hashOfConfig":"25"},{"size":1276,"mtime":1612809327830,"results":"39","hashOfConfig":"25"},{"size":1168,"mtime":1611461350680,"results":"40","hashOfConfig":"25"},{"size":7663,"mtime":1611444570142,"results":"41","hashOfConfig":"25"},{"size":3621,"mtime":1611460695766,"results":"42","hashOfConfig":"25"},{"size":2720,"mtime":1611462227915,"results":"43","hashOfConfig":"25"},{"size":3860,"mtime":1612810194210,"results":"44","hashOfConfig":"25"},{"size":225,"mtime":1611438378723,"results":"45","hashOfConfig":"25"},{"size":2429,"mtime":1611457531638,"results":"46","hashOfConfig":"25"},{"size":402,"mtime":1611462320332,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"k6jb76",{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"50"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"50"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"63"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"50"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"50"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"50"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"50"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"C:\\Users\\Gavin\\Desktop\\2021CODE\\2ndMonitorRpg\\client\\src\\index.js",[],["107","108"],"C:\\Users\\Gavin\\Desktop\\2021CODE\\2ndMonitorRpg\\client\\src\\navigator\\Navigator.js",[],"C:\\Users\\Gavin\\Desktop\\2021CODE\\2ndMonitorRpg\\client\\src\\store\\reducers\\index.js",[],"C:\\Users\\Gavin\\Desktop\\2021CODE\\2ndMonitorRpg\\client\\src\\store\\reducers\\navigationReducer.js",[],["109","110"],"C:\\Users\\Gavin\\Desktop\\2021CODE\\2ndMonitorRpg\\client\\src\\screens\\HomeScreen\\HomeScreen.js",["111"],"// React\r\nimport React, { useState } from 'react';\r\nimport './HomeScreen.css';\r\n\r\n// Redux\r\n// import { useSelector } from 'react-redux';\r\n\r\n// Components\r\n// import QuestCard from \"../../componenets/QuestCard/QuestCard\";\r\n\r\n// import HeroQuestCard from \"../../componenets/questCards/HeroQuestCard/HeroQuestCard\";\r\nimport HeroQuestContainer from \"../../componenets/questCards/HeroQuestContainer/HeroQuestContainer\";\r\nimport Sidebar from \"../../componenets/Sidebar/Sidebar\";\r\n\r\n// Constants\r\n// import Materials from '../../constants/Materials';\r\n\r\n// ========== COMPONENT ==========\r\nconst HomeScreen = props => {\r\n\r\n\t//Redux\r\n\t// const heroQuestObj = useSelector(state => state.reducer.heroQuestObj);\r\n\t// const otherQuestObj = useSelector(state => state.reducer.otherQuestObj);\r\n\r\n\t// State\r\n\t// const [hasQuest, setHasQuest] = useState(false);\r\n\t// const [timeStarted, setTimeStarted] = useState();\r\n\t// const [timeFinished, setTimeFinished] = useState();\r\n\t// const [timeNow, setTimeNow] = useState(Date.now());\r\n\r\n\t// const giveQuest = (questDuration) => {\r\n\t// \tconst now = Date.now();\r\n\t// \tconsole.log(now)\r\n\t// \tconsole.log(now + (1000 * questDuration))\r\n\t// \tsetTimeNow(now);\r\n\t// \tsetTimeStarted(now);\r\n\t// \tsetTimeFinished(now + (1000 * questDuration));\r\n\t// \tsetHasQuest(true);\r\n\t// };\r\n\r\n\treturn (\r\n\t\t<div className={`flex-full flex-row w100 homeScreen`}>\r\n\t\t\t<Sidebar />\r\n\r\n\t\t\t<div className={`homeScreen__card-container`}>\r\n\t\t\t\t<HeroQuestContainer />\r\n\r\n\t\t\t\t{/* {hasQuest ? \r\n\t\t\t\t\t<HeroQuestCard \r\n\t\t\t\t\t\ttitle=\"Hero Quest 2\"\r\n\t\t\t\t\t\t// questDuration={100}\r\n\t\t\t\t\t\ttimeStarted={timeStarted}\r\n\t\t\t\t\t\ttimeFinished={timeFinished}\r\n\t\t\t\t\t\ttimeNow={timeNow}\r\n\t\t\t\t\t\tsetHasQuest={setHasQuest}\r\n\t\t\t\t\t\tloot={[\r\n\t\r\n\t\t\t\t\t\t]}\r\n\t\t\t\t\t/>\r\n\t\t\t\t:\r\n\t\t\t\t\t<div onClick={() => { giveQuest(100) }}>\r\n\t\t\t\t\t\tGive quest\r\n\t\t\t\t\t</div>\r\n\t\t\t\t} */}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default HomeScreen;","C:\\Users\\Gavin\\Desktop\\2021CODE\\2ndMonitorRpg\\client\\src\\componenets\\QuestCard\\QuestCard.js",[],["112","113"],"C:\\Users\\Gavin\\Desktop\\2021CODE\\2ndMonitorRpg\\client\\src\\componenets\\Sidebar\\Sidebar.js",["114","115","116","117","118","119"],"// React\r\nimport React, { useEffect, useState } from 'react';\r\nimport './Sidebar.css';\r\n\r\n// Redux\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { navigate, updateAllStats } from '../../store/actions/actions';\r\n\r\n// Tools\r\nimport Materials from \"../../constants/Materials\";\r\n\r\n\r\n// Components\r\nimport SidebarItem from \"./SidebarItem\";\r\n\r\nconst Currency = props => {\r\n\tconst [hover, setHover] = useState(false);\r\n\r\n\treturn (\r\n\t\t<div className={`flex-full flex-col sidebar__currency--single`}\r\n\t\t\tonMouseEnter={() => { setHover(true) }}\r\n\t\t\tonMouseLeave={() => { setHover(false) }}>\r\n\t\t\t<img src={props.img_url} alt={props.name} className=\"sidebar__currency--image\"/>\r\n\t\t\t<p className=\"sidebar__currecncy--number\">{props.value}</p>\r\n\r\n\t\t\t<div className={`flex-full sidebar__currency--hidden`}\r\n\t\t\t\tstyle={{ display: hover ? \"block\" : \"none\" }}>\r\n\t\t\t\t<div className={`sidebar__currency--triangle`}></div>\r\n\t\t\t\t<p className={`flex-full`} style={{whiteSpace: \"nowrap\"}}>\r\n\t\t\t\t\t{props.name}\r\n\t\t\t\t</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nconst Material = props => {\r\n\tconst [hover, setHover] = useState(false);\r\n\t\r\n\treturn (\r\n\t\t<div className={`flex-full flex-col sidebar__materials--single`}\r\n\t\t\tonMouseEnter={() => { setHover(true) }}\r\n\t\t\tonMouseLeave={() => { setHover(false) }}>\r\n\t\t\t<img src={props.img_url} alt={props.name} className=\"sidebar__currency--image\"/>\r\n\t\t\t<p className=\"sidebar__materials--number\">{props.value}</p>\r\n\r\n\t\t\t<div className={`flex-full sidebar__currency--hidden`}\r\n\t\t\t\tstyle={{ display: hover ? \"block\" : \"none\" }}>\r\n\t\t\t\t<div className={`sidebar__currency--triangle`}></div>\r\n\t\t\t\t<p className={`flex-full`}>\r\n\t\t\t\t\t{props.name}\r\n\t\t\t\t</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nconst Level = props => {\r\n\treturn (\r\n\t\t<div className={`flex-full flex-col w100 sidebar__level--container`}>\r\n\t\t\t<div className={`flex-full sidebar__level--backdrop`}></div>\r\n\t\t\t<p className={`flex-full sidebar__level`}>2</p>\r\n\t\t\t<div className={`flex-full flex-row sidebar__level--progressBar`}>\r\n\t\t\t\t<div className={`flex-full sidebar__level--progressBarFill`} style={{ width: \"50%\" }}></div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\n// ========== COMPONENT ==========\r\nconst Sidebar = props => {\r\n\r\n\t// Redux\r\n\tconst dispatch = useDispatch();\r\n\r\n\t// State\r\n\tconst tokenObj = useSelector(state => state.reducer.tokenObj);\r\n\tconst currencyObj = useSelector(state => state.reducer.currencyObj);\r\n\tconst materialObj = useSelector(state => state.reducer.materialObj);\r\n\tconst heroQuestObj = useSelector(state => state.reducer.heroQuestObj);\r\n\tconst itemsObj = useSelector(state => state.reducer.itemsObj);\r\n\tconst statsObj = useSelector(state => state.reducer.statsObj);\r\n\r\n\tconst [toggleCurrency, setToggleCurrency] = useState(true);\r\n\tconst [toggleMaterials, setToggleMaterials] = useState(true);\r\n\tconst [toggleAvatar, setToggleAvatar] = useState(true);\r\n\r\n\t// const [nav, setNav] = useState(0);\r\n\r\n\tconsole.log(\"stats\", statsObj);\r\n\r\n\treturn (\r\n\t\t<div className={`flex-full flex-col sidebar`}>\r\n\t\t\t{/* Nav */}\r\n\t\t\t{/* <nav className={`flex-full flex-row w100 sidebar__nav`}>\r\n\t\t\t\t<div className={`flex-full`}\r\n\t\t\t\t\tstyle={{ backgroundColor: nav === 0 ? \"rgb(240, 240, 240)\" : \"rgb(167, 160, 160)\" }}\r\n\t\t\t\t\tonClick={() => { \r\n\t\t\t\t\t\tsetNav(0);\r\n\t\t\t\t\t}}>\r\n\t\t\t\t\tO\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className={`flex-full`}\r\n\t\t\t\t\tstyle={{ backgroundColor: nav === 1 ? \"rgb(240, 240, 240)\" : \"rgb(167, 160, 160)\" }}\r\n\t\t\t\t\tonClick={() => { \r\n\t\t\t\t\t\tsetNav(1);\r\n\t\t\t\t\t}}>\r\n\t\t\t\t\tO\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className={`flex-full`}\r\n\t\t\t\t\tstyle={{ backgroundColor: nav === 2 ? \"rgb(240, 240, 240)\" : \"rgb(167, 160, 160)\" }}\r\n\t\t\t\t\tonClick={() => { \r\n\t\t\t\t\t\tsetNav(2);\r\n\t\t\t\t\t}}>\r\n\t\t\t\t\tO\r\n\t\t\t\t</div>\r\n\t\t\t</nav> */}\r\n\r\n\r\n\t\t\t{/* Content */}\r\n\t\t\t<div className={`flex-full flex-col w100 sidebar__content`}>\r\n\t\t\t\t<p className=\"sidebar__username\">MEGABUTT</p>\r\n\r\n\t\t\t\t{/* Level and icon */}\r\n\t\t\t\t<Level />\r\n\r\n\t\t\t\t{/* Weapon / Trinket */}\r\n\t\t\t\t<div\r\n\t\t\t\t\tonClick={() => { setToggleAvatar(!toggleAvatar) }}\r\n\t\t\t\t\tclassName={`flex-full flex-row w100 sidebar__dropdown--title`}>\r\n\t\t\t\t\t<p>x</p>\r\n\t\t\t\t\t<p>Items</p>\r\n\t\t\t\t</div>\r\n\t\t\t\t{toggleAvatar &&\r\n\t\t\t\t\t<div className={`flex-full flex-row w100 sidebar__materials--container`}>\r\n\t\t\t\t\t\t{itemsObj && Object.keys(itemsObj).map(item => {\r\n\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t<SidebarItem \r\n\t\t\t\t\t\t\t\t\tname={itemsObj[item].name}\r\n\t\t\t\t\t\t\t\t\timg_url={itemsObj[item].img_url}\r\n\t\t\t\t\t\t\t\t\tlevel={itemsObj[item].level}\r\n\t\t\t\t\t\t\t\t\texp={itemsObj[item].exp}\r\n\t\t\t\t\t\t\t\t\tstats={[itemsObj[item].speed, itemsObj[item].power, itemsObj[item].luck, itemsObj[item].wisdom]}\r\n\t\t\t\t\t\t\t\t\tkey={itemsObj[item].name}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t})}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t}\r\n\r\n\t\t\t\t{/* Tokens */}\r\n\t\t\t\t<div\r\n\t\t\t\t\tonClick={() => { setToggleCurrency(!toggleCurrency) }}\r\n\t\t\t\t\tclassName={`flex-full flex-row w100 sidebar__dropdown--title`}>\r\n\t\t\t\t\t<p>x</p>\r\n\t\t\t\t\t<p>Tokens</p>\r\n\t\t\t\t</div>\r\n\t\t\t\t{toggleCurrency ?\r\n\t\t\t\t\t<div className={`flex-full flex-row w100 sidebar__materials--container`}>\r\n\t\t\t\t\t\t{tokenObj && Object.keys(tokenObj).map(token => {\r\n\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t<Currency \r\n\t\t\t\t\t\t\t\t\timg_url={tokenObj[token].img_url}\r\n\t\t\t\t\t\t\t\t\tname={tokenObj[token].name}\r\n\t\t\t\t\t\t\t\t\tvalue={tokenObj[token].qty}\r\n\t\t\t\t\t\t\t\t\tkey={tokenObj[token].name}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t})}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t: null }\r\n\r\n\t\t\t\t{/* Currency */}\r\n\t\t\t\t<div\r\n\t\t\t\t\tonClick={() => { setToggleCurrency(!toggleCurrency) }}\r\n\t\t\t\t\tclassName={`flex-full flex-row w100 sidebar__dropdown--title`}>\r\n\t\t\t\t\t<p>x</p>\r\n\t\t\t\t\t<p>Currency</p>\r\n\t\t\t\t</div>\r\n\t\t\t\t{toggleCurrency ?\r\n\t\t\t\t\t<div className={`flex-full flex-row w100 sidebar__materials--container`}>\r\n\t\t\t\t\t\t{currencyObj && Object.keys(currencyObj).map(currency => {\r\n\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t<Currency \r\n\t\t\t\t\t\t\t\t\timg_url={currencyObj[currency].img_url}\r\n\t\t\t\t\t\t\t\t\tname={currencyObj[currency].mat}\r\n\t\t\t\t\t\t\t\t\tvalue={currencyObj[currency].qty}\r\n\t\t\t\t\t\t\t\t\tkey={currencyObj[currency].mat}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t})}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t: null }\r\n\r\n\t\t\t\t{/* Materials */}\r\n\t\t\t\t<div\r\n\t\t\t\t\tonClick={() => { setToggleMaterials(!toggleMaterials) }}\r\n\t\t\t\t\tclassName={`flex-full flex-row w100 sidebar__dropdown--title`}>\r\n\t\t\t\t\t<p>x</p>\r\n\t\t\t\t\t<p>Materials</p>\r\n\t\t\t\t</div>\r\n\t\t\t\t{toggleMaterials ?\r\n\t\t\t\t\t<div className={`flex-full flex-row w100 sidebar__materials--container`}>\r\n\t\t\t\t\t\t{materialObj && Object.keys(materialObj).map(mat => {\r\n\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t<Material \r\n\t\t\t\t\t\t\t\t\timg_url={materialObj[mat].img_url}\r\n\t\t\t\t\t\t\t\t\tname={materialObj[mat].mat}\r\n\t\t\t\t\t\t\t\t\tvalue={materialObj[mat].qty}\r\n\t\t\t\t\t\t\t\t\tkey={materialObj[mat].mat}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t})}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t: null }\r\n\t\t\t\t\t\t\r\n\t\t\t\t{/* <div style={{height: \"20px\", width: \"100%\"}} onClick={() => {\r\n\t\t\t\t\tdispatch(updateAllStats({\r\n\t\t\t\t\t\tspeed: 1000,\r\n\t\t\t\t\t\tpower: 0,\r\n\t\t\t\t\t\tluck: 0,\r\n\t\t\t\t\t\twisdom: 0\r\n\t\t\t\t\t}));\r\n\t\t\t\t}}>X</div> */}\r\n\r\n\t\t\t</div>\r\n\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Sidebar;","C:\\Users\\Gavin\\Desktop\\2021CODE\\2ndMonitorRpg\\client\\src\\constants\\Tools.js",[],["120","121"],"C:\\Users\\Gavin\\Desktop\\2021CODE\\2ndMonitorRpg\\client\\src\\store\\actions\\navigationActions.js",[],["122","123"],"C:\\Users\\Gavin\\Desktop\\2021CODE\\2ndMonitorRpg\\client\\src\\componenets\\ProgressBar\\ProgressBar.js",["124","125","126","127","128","129","130"],"// React and CSS\r\nimport React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport './ProgressBar.css';\r\n\r\n// Redux\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { addSinglecurrency } from '../../store/actions/actions';\r\n\r\nimport { updateMaterial } from \"../../constants/functions\";\r\nimport Materials from '../../constants/Materials';\r\n\r\n// COMPONENT: tick\r\nconst Tick = props => {\r\n\treturn (\r\n\t\t<div className={`progressBar__tick`}\r\n\t\t\tstyle={{\r\n\t\t\t\tleft: `${props.percent}%`, \r\n\t\t\t\twidth: `${props.width}px`, \r\n\t\t\t\tbackgroundColor: props.color\r\n\t\t\t\t}}>\r\n\t\t\t</div>\r\n\t);\r\n};\r\n\r\n// COMPONENT: single currency\r\nconst SingleCurrency = props => {\r\n\tconst [display, setDisplay] = useState(false);\r\n\r\n\treturn (\r\n\t\t<div \r\n\t\t\tclassName={`flex-full flex-col currency__group`}\r\n\t\t\tonMouseEnter={() => { setDisplay(true) }}\r\n\t\t\tonMouseLeave={() => { setDisplay(false) }}>\r\n\t\t\t<img src={props.img_url} className={`flex-full currency__image`} alt={props.name} />\r\n\t\t\t<p className={`flex-full currency__count`}>{props.count}</p>\r\n\r\n\t\t\t<div \r\n\t\t\t\tclassName={`flex-full flex-col currency__reward`}\r\n\t\t\t\tstyle={{ display: display ? \"block\" : \"none\" }}>\r\n\t\t\t\t<div className={`currency__reward--triangle`}></div>\r\n\t\t\t\t<p className={`flex-full currency__reward--text`}>\r\n\t\t\t\t\t{props.name}\r\n\t\t\t\t</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\n// COMPONENT: single reward\r\nconst SingleReward = props => {\r\n\tconst [display, setDisplay] = useState(false);\r\n\r\n\treturn (\r\n\t\t<div className={`flex-full currency__reward--container`}\r\n\t\t\tonMouseEnter={()=>{ setDisplay(true) }}\r\n\t\t\tonMouseLeave={()=>{ setDisplay(false) }}>\r\n\t\t\t<img src={props.img_url} alt=\"reward\" className=\"currency__reward-icon\" />\r\n\r\n\t\t\t<div \r\n\t\t\t\tclassName={`flex-full flex-col loot__reward`}\r\n\t\t\t\tstyle={{ display: display ? \"block\" : \"none\" }}>\r\n\t\t\t\t<div className={`currency__reward--triangle`}></div>\r\n\t\t\t\t<p className={`flex-full currency__reward--text`}>\r\n\t\t\t\t\t{props.name} Hello here is some text for this shit man I dont know what else to say.\r\n\t\t\t\t</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\n// COMPONENT: treasure popup\r\nconst Treasure = props => {\r\n\tconst claim = () => {\r\n\t\tconsole.log(\"claimed\")\r\n\t\tupdateMaterial(1, Materials.lollipop.name, 1, Materials.lollipop.img_url);\r\n\t\tprops.setTreasure(false);\r\n\t\tprops.setRewards([...props.rewards, {\r\n\t\t\tname: Materials.lollipop.name, \r\n\t\t\timg_url: Materials.lollipop.img_url\r\n\t\t}]);\r\n\t}\r\n\r\n\tuseEffect(() => {\r\n\t\tconst timeout = setTimeout(() => {\t\t\t\r\n\t\t\tprops.setTreasure(false);\r\n\t\t}, 10000);\r\n\t\treturn () => clearTimeout(timeout);\r\n\t}, []);\r\n\r\n\treturn (\r\n\t\t<div onClick={claim} className={`flex-full treasure__x`}>\r\n\t\t\tX\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\n\r\n// ========== COMP ==========\r\nconst ProgressBar = props => {\r\n\r\n\t// Redux\r\n\tconst dispatch = useDispatch();\r\n\r\n\t// Currencies\r\n\tconst [currencyObj, setCurrencyObj] = useState(() => {\r\n\t\tlet newObj = {};\r\n\t\tprops.loot.forEach(loot => {\r\n\t\t\tif (loot.curr) { newObj = {...newObj, [loot.name]: 0}};\r\n\t\t})\r\n\t\treturn newObj;\r\n\t});\r\n\tconst [rewards, setRewards] = useState([]);\r\n\tconst [treasure, setTreasure] = useState(false);\r\n\tconst [rewardTicks, setRewardTicks] = useState([]);\r\n\t\r\n\t// Time\r\n\tconst [expTime, setExpTime] = useState(Date.now() + (1000 * props.duration));\r\n\tconst [startTime, setStartTime] = useState(Date.now());\r\n\tconst [percent, setPercent] = useState(0);\r\n\r\n\t// Initiates 1s game loop\r\n\tuseEffect(() => {\r\n\t\tconst interval = setInterval(() => {\r\n\t\t\tconst maxTime = expTime - startTime;\r\n\t\t\tconst currentPercent = ((maxTime-(expTime-Date.now()))/maxTime) * 100;\r\n\t\t\tcurrentPercent < 100 ? setPercent(currentPercent) : setPercent(100);\r\n\r\n\t\t\t// Clear interval after 100%\r\n\t\t\tif (currentPercent >= 100) {\r\n\t\t\t\tclearInterval(interval);\r\n\t\t\t};\r\n\t\t\t\r\n\t\t\t// Every 1s\r\n\t\t\t}, 1000);\r\n\t\treturn () => clearInterval(interval);\r\n\t}, []);\r\n\r\n\t// Ticks every second \r\n\tuseEffect(() => {\r\n\t\t// Win condition\r\n\t\tif (percent === 100) {\r\n\t\t\tprops.loot.forEach((lootObj) => {\r\n\t\t\t\tif (lootObj.win) {\r\n\t\t\t\t\tupdateMaterial(1, lootObj.name, lootObj.qty, lootObj.img_url);\r\n\t\t\t\t\tsetRewardTicks([...rewardTicks, {percent: percent, width: lootObj.tick, color: lootObj.color}]);\r\n\t\t\t\t\tsetRewards([...rewards, {\r\n\t\t\t\t\t\tname: lootObj.name, \r\n\t\t\t\t\t\timg_url: lootObj.img_url\r\n\t\t\t\t\t}]);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\treturn;\r\n\t\t};\r\n\r\n\t\t// Check each loot table every second\r\n\t\tlet newCurrencyObj = {...currencyObj};\r\n\t\tlet newRewardsArr = [...rewards];\r\n\t\tlet newTickArr = [...rewardTicks];\r\n\t\tprops.loot.forEach(lootObj => {\r\n\r\n\t\t\t// Better random: one rng, filter list for any that have lower p, choose one from the remaining randomly\r\n\r\n\r\n\t\t\tconst rng = Math.random() * 100;\r\n\t\t\tif (rng > lootObj.p) {\r\n\t\t\t\tupdateMaterial(1, lootObj.name, 1, lootObj.img_url);\r\n\t\t\t\t// New tick\r\n\t\t\t\tnewTickArr = [...newTickArr, {percent: percent, width: lootObj.tick, color: lootObj.color}];\r\n\r\n\t\t\t\tif (lootObj.curr) {\r\n\t\t\t\t\t// New currency\r\n\t\t\t\t\tnewCurrencyObj = {...newCurrencyObj, [lootObj.name]: newCurrencyObj[lootObj.name] + 1};\r\n\t\t\t\t\tdispatch(addSinglecurrency(lootObj.name, 1));\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// New item\r\n\t\t\t\t\tnewRewardsArr = [...newRewardsArr, {\r\n\t\t\t\t\t\tname: lootObj.name,\r\n\t\t\t\t\t\timg_url: lootObj.img_url,\r\n\t\t\t\t\t\tnumber: 1,\r\n\t\t\t\t\t}];\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t});\r\n\t\tsetCurrencyObj(newCurrencyObj);\r\n\t\tsetRewards(newRewardsArr);\r\n\t\tsetRewardTicks(newTickArr);\r\n\r\n\t\t// TREASURE\r\n\t\tconst rnggg = Math.random() * 100;\r\n\t\t// console.log(\"rng\", rnggg);\r\n\t\tif (rnggg > 95) { setTreasure(true) };\r\n\t\t// TREASURE\r\n\t}, [percent]);\r\n\r\n\treturn (\r\n\t\t<div className={`flex-full flex-col w100 flex-ai-fs progressBar__container`}>\r\n\r\n\t\t\t{/* Treasure */}\r\n\t\t\t{treasure ? \r\n\t\t\t\t<Treasure\r\n\t\t\t\t\tsetTreasure={setTreasure}\r\n\t\t\t\t\tsetRewards={setRewards}\r\n\t\t\t\t\trewards={rewards}\r\n\t\t\t\t/> \r\n\t\t\t: null}\r\n\r\n\t\t\t<div className={`flex-full flex-row w100 flex-ai-fs flex-jc-fs`}>\r\n\t\t\t\t<div className={`flex-full flex-col flex-ai-fs progressBar__currency--container`}>\r\n\t\t\t\t\t{/* Currencies */}\r\n\t\t\t\t\t<p className={`progressBar__subtitle`}>Currency</p>\r\n\t\t\t\t\t<div className={`flex-full flex-row`}>\r\n\t\t\t\t\t\t{props.loot.length > 0 ? props.loot.map((loot, i) => {\r\n\t\t\t\t\t\t\tif (loot.curr) {\r\n\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t<SingleCurrency \r\n\t\t\t\t\t\t\t\t\t\tname={loot.name}\r\n\t\t\t\t\t\t\t\t\t\timg_url={loot.img_url}\r\n\t\t\t\t\t\t\t\t\t\tcount={currencyObj[loot.name]}\r\n\t\t\t\t\t\t\t\t\t\tkey={i}\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\treturn null;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}) : null}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<div className={`flex-full flex-col flex-ai-fs`}>\r\n\t\t\t\t\t{/* Loot */}\r\n\t\t\t\t\t<p className={`progressBar__subtitle`}>Loot</p>\r\n\t\t\t\t\t<div className={`flex-full flex-row`}>\r\n\t\t\t\t\t\t{rewards.length > 0 ? rewards.map((reward, i) => {\r\n\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t<SingleReward\r\n\t\t\t\t\t\t\t\t\timg_url={reward.img_url}\r\n\t\t\t\t\t\t\t\t\tname={reward.name}\r\n\t\t\t\t\t\t\t\t\tkey={i} \r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t}) : null}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t\r\n\t\t\t{/* Progress */}\r\n\t\t\t<div className={`flex-full flex-row w100`}>\r\n\t\t\t\t<div className={`flex-full flex-col flex-ai-fs w100`}>\r\n\t\t\t\t\t<p className={`progressBar__subtitle`}>Progress Bar</p>\r\n\t\t\t\t\t<div className={`progressBar`}>\r\n\t\t\t\t\t\t<div \r\n\t\t\t\t\t\t\tclassName={`progressBarFill`} \r\n\t\t\t\t\t\t\tstyle={{ \r\n\t\t\t\t\t\t\t\twidth: `${percent}%`,\r\n\t\t\t\t\t\t\t\tbackgroundColor: percent >= 100 ? \"#0fca18\" : \"red\"\r\n\t\t\t\t\t\t\t}}></div>\r\n\t\t\t\t\t\t{rewardTicks.length > 0 ? rewardTicks.map((obj, i) => {\r\n\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t<Tick \r\n\t\t\t\t\t\t\t\t\tpercent={obj.percent} \r\n\t\t\t\t\t\t\t\t\twidth={obj.width} \r\n\t\t\t\t\t\t\t\t\tcolor={obj.color} \r\n\t\t\t\t\t\t\t\t\tkey={i}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t\t: null\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<p className={`flex-full progressPercent`}>{parseFloat(percent).toFixed(2)}%</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default ProgressBar;","C:\\Users\\Gavin\\Desktop\\2021CODE\\2ndMonitorRpg\\client\\src\\constants\\functions.js",[],"C:\\Users\\Gavin\\Desktop\\2021CODE\\2ndMonitorRpg\\client\\src\\constants\\Materials.js",[],"C:\\Users\\Gavin\\Desktop\\2021CODE\\2ndMonitorRpg\\client\\src\\store\\reducers\\materialReducer.js",[],"C:\\Users\\Gavin\\Desktop\\2021CODE\\2ndMonitorRpg\\client\\src\\store\\actions\\materialActions.js",[],["131","132"],"C:\\Users\\Gavin\\Desktop\\2021CODE\\2ndMonitorRpg\\client\\src\\store\\reducers\\reducer.js",[],"C:\\Users\\Gavin\\Desktop\\2021CODE\\2ndMonitorRpg\\client\\src\\store\\actions\\actions.js",[],"C:\\Users\\Gavin\\Desktop\\2021CODE\\2ndMonitorRpg\\client\\src\\componenets\\questCards\\HeroQuestCard\\HeroQuestCard.js",["133","134"],"// React\r\nimport React, { useEffect, useState } from 'react';\r\nimport axios from \"axios\";\r\nimport './HeroQuestCard.css';\r\n\r\n// Redux\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { updateAllCurrencies, updateAllMaterials } from '../../../store/actions/actions';\r\n\r\n// Components\r\nimport QuestProgressBar from \"../QuestProgressBar/QuestProgressBar\";\r\n\r\n// Functions\r\nimport { updateMaterial } from \"../../../constants/Functions\";\r\n\r\n\r\n// COMPONENT: single reward\r\nconst SingleReward = props => {\r\n\tconst [display, setDisplay] = useState(false);\r\n\r\n\treturn (\r\n\t\t<div className={`flex-full flex-col singleReward__container`}\r\n\t\t\tonMouseEnter={()=>{ setDisplay(true) }}\r\n\t\t\tonMouseLeave={()=>{ setDisplay(false) }}>\r\n\t\t\t<img src={props.img_url} alt=\"reward\" className=\"singleReward__rewardIcon\" />\r\n\t\t\t<p className={`singleReward__value`}>{props.value}</p>\r\n\r\n\t\t\t<div \r\n\t\t\t\tclassName={`flex-full flex-col singleReward__hiddenText`}\r\n\t\t\t\tstyle={{ display: display ? \"block\" : \"none\" }}>\r\n\t\t\t\t<div className={`singleReward__hiddenText--triangle`}></div>\r\n\t\t\t\t<p className={`flex-full singleReward__hiddenText--text`}>\r\n\t\t\t\t\t{props.name}\r\n\t\t\t\t</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\n\r\n// ========== COMPONENT ==========\r\nconst HeroQuestCard = props => {\r\n\r\n\t// Redux\r\n\tconst dispatch = useDispatch();\r\n\tconst currencyObj = useSelector(state => state.reducer.currencyObj);\r\n\tconst materialObj = useSelector(state => state.reducer.materialObj);\r\n\r\n\t// console.log(materialObj);\r\n\r\n\t// State\r\n\tconst [lootObj, setLootObj] = useState(props.loot);\r\n\r\n\t// Updating loot opject's qty\r\n\tconst updateLootQty = (lootArr) => {\r\n\t\t// Update local loot state and redux state\r\n\t\tlet newLootObj = {...lootObj};\r\n\t\tlet newCurrencyObj = {...currencyObj};\r\n\t\tlet newMaterialObj = {...materialObj};\r\n\r\n\t\tlootArr.forEach(loot => {\r\n\t\t\t// Update the loot's quantity\r\n\t\t\tnewLootObj = {...newLootObj, [`${loot.name}`]: {...newLootObj[`${loot.name}`], qty: newLootObj[`${loot.name}`].qty + loot.qty}};\r\n\r\n\t\t\t// Update the loot's quantity in redux\r\n\t\t\tif (loot.curr) {\r\n\t\t\t\t// Currency: if already owned, else push new\r\n\t\t\t\tif (newCurrencyObj[loot.name]) {\r\n\t\t\t\t\tnewCurrencyObj = {...newCurrencyObj, [`${loot.name}`]: {...newCurrencyObj[`${loot.name}`], qty: newCurrencyObj[`${loot.name}`].qty + loot.qty}};\r\n\t\t\t\t} else {\r\n\t\t\t\t\tnewCurrencyObj = {...newCurrencyObj, [`${loot.name}`]: {name: `${loot.name}`, qty: loot.qty, img_url: `${loot.img_url}`, curr: true}};\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\t// Materials: if already owned, else push new\r\n\t\t\t\tif (newMaterialObj[loot.name]) {\r\n\t\t\t\t\tnewMaterialObj = {...newMaterialObj, [`${loot.name}`]: {...newMaterialObj[`${loot.name}`], qty: newMaterialObj[`${loot.name}`].qty + loot.qty}};\r\n\t\t\t\t} else {\r\n\t\t\t\t\tnewMaterialObj = {...newMaterialObj, [`${loot.name}`]: {name: `${loot.name}`, qty: loot.qty, img_url: `${loot.img_url}`}};\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Update DB\r\n\t\t\tupdateMaterial(1, loot.name, loot.qty, loot.img_url);\r\n\t\t});\r\n\r\n\t\tsetLootObj(newLootObj);\r\n\t\tdispatch(updateAllCurrencies(newCurrencyObj));\r\n\t\tdispatch(updateAllMaterials(newMaterialObj));\r\n\t};\r\n\r\n\t// When they click complete quest\r\n\tconst completeQuest = () => {\r\n\t\tlet newCurrencyObj = {...currencyObj};\r\n\t\tlet newMaterialObj = {...materialObj};\r\n\r\n\t\tprops.winLoot.forEach((loot => {\r\n\t\t\t// Update the loot's quantity in redux\r\n\t\t\tif (loot.mat.curr) {\r\n\t\t\t\t// Currency: if already owned, else push new\r\n\t\t\t\tif (newCurrencyObj[loot.mat.name]) {\r\n\t\t\t\t\tnewCurrencyObj = {...newCurrencyObj, [`${loot.mat.name}`]: {...newCurrencyObj[`${loot.mat.name}`], qty: newCurrencyObj[`${loot.mat.name}`].qty + loot.qty}};\r\n\t\t\t\t} else {\r\n\t\t\t\t\tnewCurrencyObj = {...newCurrencyObj, [`${loot.mat.name}`]: {name: `${loot.mat.name}`, qty: loot.qty, img_url: `${loot.mat.img_url}`, curr: true}};\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\t// Materials: if already owned, else push new\r\n\t\t\t\tif (newMaterialObj[loot.mat.name]) {\r\n\t\t\t\t\tnewMaterialObj = {...newMaterialObj, [`${loot.mat.name}`]: {...newMaterialObj[`${loot.mat.name}`], qty: newMaterialObj[`${loot.mat.name}`].qty + loot.qty}};\r\n\t\t\t\t} else {\r\n\t\t\t\t\tnewMaterialObj = {...newMaterialObj, [`${loot.mat.name}`]: {name: `${loot.mat.name}`, qty: loot.qty, img_url: `${loot.mat.img_url}`}};\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Update DB\r\n\t\t\tupdateMaterial(1, loot.mat.name, loot.qty, loot.mat.img_url);\r\n\t\t}));\r\n\r\n\t\tdispatch(updateAllCurrencies(newCurrencyObj));\r\n\t\tdispatch(updateAllMaterials(newMaterialObj));\r\n\t\tprops.setQuestCompleted(false);\r\n\t\tprops.removeQuest(props.id);\r\n\t};\r\n\r\n\t// Remove the quest\r\n\tconst removeQuest = () => {\r\n\t\tprops.setQuestCompleted(false);\r\n\t\tprops.removeQuest(props.id);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div className={`flex-full flex-row heroQuestCard`}>\r\n\r\n\t\t\t{/* Image */}\r\n\t\t\t<div className={`flex-full heroQuestCard__image`}>\r\n\t\t\t\t{props.questCompleted &&\r\n\t\t\t\t\t<div style={{width: 30, height: 30, backgroundColor: \"red\"}} onClick={() => {\r\n\t\t\t\t\t\tcompleteQuest();\r\n\t\t\t\t\t}}></div>\r\n\t\t\t\t}\r\n\t\t\t</div>\r\n\r\n\t\t\t{/* Info container */}\r\n\t\t\t<div className={`flex-full flex-col w100 heroQuestCard__info`}>\r\n\r\n\t\t\t\t{/* Name and info bar */}\r\n\t\t\t\t<div className={`flex-full flex-row w100 heroQuestCard__header`}>\r\n\t\t\t\t\t<div className={`flex-full flex-row flex-jc-fs w100`}>\r\n\t\t\t\t\t\t<p className={`heroQuestCard__header--title`}>{props.title}</p>\r\n\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t<div className={`flex-full flex-row heroQuestCard__buttons`}>\r\n\t\t\t\t\t\t<p className={`flex-full heroQuestCard__button--info`}>?</p>\r\n\t\t\t\t\t\t<p className={`flex-full heroQuestCard__button--x`} onClick={removeQuest}>x</p>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t{/* Materials bar */}\r\n\t\t\t\t<div className={`flex-full flex-row flex-jc-fs w100 heroQuestCard__lootContainer`}>\r\n\r\n\t\t\t\t\t{/* Currencies */}\r\n\t\t\t\t\t<div className={`flex-full flex-col flex-ai-fs heroQuestCard__loot`}>\r\n\t\t\t\t\t\t<p className={`flex-full heroQuestCard__loot--text`}>Currency</p>\r\n\t\t\t\t\t\t<div className={`flex-full flex-row heroQuestCard__loot--currencies`}>\r\n\t\t\t\t\t\t\t{lootObj && Object.keys(lootObj).map((loot) => {\r\n\t\t\t\t\t\t\t\tif (lootObj[loot].curr) {\r\n\t\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t\t<SingleReward \r\n\t\t\t\t\t\t\t\t\t\t\tname={lootObj[loot].name}\r\n\t\t\t\t\t\t\t\t\t\t\timg_url={lootObj[loot].img_url}\r\n\t\t\t\t\t\t\t\t\t\t\tvalue={lootObj[loot].qty}\r\n\t\t\t\t\t\t\t\t\t\t\tkey={lootObj[loot].name}\r\n\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\treturn null;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t{/* Loot */}\r\n\t\t\t\t\t<div className={`flex-full flex-col flex-ai-fs heroQuestCard__loot`}>\r\n\t\t\t\t\t\t<p className={`flex-full heroQuestCard__loot--text`}>Loot</p>\r\n\t\t\t\t\t\t<div className={`flex-full flex-row heroQuestCard__loot--currencies`}>\r\n\t\t\t\t\t\t\t{lootObj && Object.keys(lootObj).map((loot) => {\r\n\t\t\t\t\t\t\t\t// console.log(lootObj[loot]);\r\n\t\t\t\t\t\t\t\tif (!lootObj[loot].curr && lootObj[loot].qty > 0) {\r\n\t\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t\t<SingleReward \r\n\t\t\t\t\t\t\t\t\t\t\tname={lootObj[loot].name}\r\n\t\t\t\t\t\t\t\t\t\t\timg_url={lootObj[loot].img_url}\r\n\t\t\t\t\t\t\t\t\t\t\tvalue={lootObj[loot].qty}\r\n\t\t\t\t\t\t\t\t\t\t\tkey={lootObj[loot].name}\r\n\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\treturn null;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\r\n\r\n\t\t\t\t\t{/* <div onClick={() => {\r\n\t\t\t\t\t\tsetLootObj({...lootObj, [`Bronze`]: { ...lootObj[`Bronze`], qty: lootObj[`Bronze`].qty + 1 }})\r\n\t\t\t\t\t}}>11111</div> */}\r\n\r\n\t\t\t\t\t{/* <div onClick={() => {\r\n\t\t\t\t\t\tconsole.log(currencyObj);\r\n\t\t\t\t\t\tconsole.log(materialObj);\r\n\t\t\t\t\t}}>22222</div> */}\r\n\r\n\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t{/* Progress bar */}\r\n\t\t\t\t<QuestProgressBar\r\n\t\t\t\t\ttimeStarted={props.timeStarted}\r\n\t\t\t\t\ttimeFinished={props.timeFinished}\r\n\t\t\t\t\ttimeNow={props.timeNow}\r\n\t\t\t\t\tupdateLootQty={updateLootQty}\r\n\t\t\t\t\tsetQuestCompleted={props.setQuestCompleted}\r\n\t\t\t\t\tloot={props.loot}\r\n\t\t\t\t/>\r\n\r\n\t\t\t</div>\r\n\r\n\t\t</div>\r\n\t)\r\n};\r\n\r\nexport default HeroQuestCard;","C:\\Users\\Gavin\\Desktop\\2021CODE\\2ndMonitorRpg\\client\\src\\componenets\\questCards\\QuestProgressBar\\QuestProgressBar.js",["135","136","137","138","139"],"// React and CSS\r\nimport React, { useState, useEffect } from 'react';\r\nimport './QuestProgressBar.css';\r\n\r\n// Redux\r\nimport { useSelector } from 'react-redux';\r\n\r\n// COMPONENT: tick\r\nconst Tick = props => {\r\n\treturn (\r\n\t\t<div \r\n\t\t\tclassName={`questProgressBar__tick`}\r\n\t\t\tstyle={{\r\n\t\t\t\tleft: `${props.percent}%`, \r\n\t\t\t\ttop: `${props.top}px`, \r\n\t\t\t\twidth: `${props.width}px`, \r\n\t\t\t\theight: `${props.width}px`, \r\n\t\t\t\tbackgroundColor: props.color\r\n\t\t\t}}>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\n// ========== COMPONENT ==========\r\nconst QuestProgressBar = props => {\r\n\r\n\t// State\r\n\tconst statsObj = useSelector(state => state.reducer.statsObj);\r\n\r\n\tconst [enabled, setEnabled] = useState(false);\r\n\tconst [startTime, setStartTime] = useState(props.timeStarted);\r\n\tconst [expTime, setExpTime] = useState(props.timeFinished);\r\n\tconst [lootObj, setLootObj] = useState(props.loot);\r\n\tconst [percent, setPercent] = useState(0);\r\n\tconst [ticks, setTicks] = useState([]);\r\n\r\n\t// Initiate loop\r\n\tuseEffect(() => {\r\n\t\t// Time is a fixed 750ms with 250ms extra that lowers with item speed. 1 speed = 0.25ms\r\n\t\tconst time = 750 + (250 * (1 - statsObj.speed/1000));\r\n\r\n\t\tconst interval = setInterval(() => { loop(interval) }, time);\r\n\t\tloop(interval);\r\n\t\tsetEnabled(true);\r\n\t\treturn () => clearInterval(interval);\r\n\t}, []);\r\n\r\n\tconst loop = (interval) => {\r\n\t\tconst maxTime = expTime - startTime;\r\n\t\tconst currentPercent = ((maxTime-(expTime-Date.now()))/maxTime) * 100;\r\n\t\tcurrentPercent < 100 ? setPercent(currentPercent) : setPercent(100);\r\n\r\n\t\t// Clear interval after 100%\r\n\t\tif (currentPercent >= 100) {\r\n\t\t\tprops.setQuestCompleted(true);\r\n\t\t\tclearInterval(interval);\r\n\t\t};\r\n\t};\r\n\r\n\t// GAME LOOP LOGIC\r\n\tuseEffect(() => {\r\n\t\tif (percent >= 100) {\r\n\t\t\t// Win condition\r\n\r\n\r\n\t\t} else if (enabled) {\r\n\t\t\t// Loot roll\r\n\t\t\trollForLoot();\r\n\r\n\r\n\t\t\t// Treasure\r\n\t\t};\t\r\n\t}, [percent]);\r\n\r\n\t// Loot roll\r\n\tconst rollForLoot = () => {\r\n\t\tif (percent >= 100) return;\r\n\r\n\t\t// > [{name: \"name\", qty: qty}, {...}]\r\n\t\tlet lootArr = [];\r\n\t\tlet matArr = [...ticks];\r\n\r\n\t\t// For each material, roll to see if won\r\n\t\tObject.keys(lootObj).forEach(loot => {\r\n\t\t\tconst rng = Math.random() * 100;\r\n\t\t\tif (rng > lootObj[loot].p) {\r\n\t\t\t\tlootArr = [...lootArr, { name: lootObj[loot].name, qty: 1, img_url: lootObj[loot].img_url, curr: lootObj[loot].curr }];\r\n\t\t\t\tmatArr = [...matArr, { percent: percent, width: lootObj[loot].tick, top: lootObj[loot].tickTop, color: lootObj[loot].color }];\r\n\t\t\t};\r\n\t\t});\r\n\r\n\t\t// If anything won, update ticks and qty\r\n\t\tif (lootArr.length > 0) {\r\n\t\t\tsetTicks(matArr);\r\n\t\t\tprops.updateLootQty(lootArr);\r\n\t\t};\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div className={`flex-full flex-col w100 flex-ai-fs questProgressBar`}>\r\n\r\n\t\t\t{/* Progress */}\r\n\t\t\t<div className={`flex-full flex-row w100`}>\r\n\t\t\t\t<div className={`flex-full flex-col flex-ai-fs w100`}>\r\n\t\t\t\t\t<p className={`questProgressBar__subtitle`}>Progress Bar</p>\r\n\t\t\t\t\t<div className={`questProgressBar__bar`}>\r\n\t\t\t\t\t\t<div \r\n\t\t\t\t\t\t\tclassName={`questProgressBar__fill`} \r\n\t\t\t\t\t\t\tstyle={{ \r\n\t\t\t\t\t\t\t\twidth: `${percent}%`,\r\n\t\t\t\t\t\t\t\tbackgroundColor: percent >= 100 ? \"#0fca18\" : \"red\"\r\n\t\t\t\t\t\t\t}}>\r\n\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t{/* Tick */}\r\n\t\t\t\t\t\t{ticks.length > 0 ? ticks.map((tick, i) => {\r\n\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t<Tick \r\n\t\t\t\t\t\t\t\t\tpercent={tick.percent} \r\n\t\t\t\t\t\t\t\t\twidth={tick.width}\r\n\t\t\t\t\t\t\t\t\ttop={tick.top}\r\n\t\t\t\t\t\t\t\t\tcolor={tick.color} \r\n\t\t\t\t\t\t\t\t\tkey={i}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t}) : null}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t{/* Percent complete */}\r\n\t\t\t\t<p className={`flex-full questProgressBar__percent`}>{parseFloat(percent).toFixed(2)}%</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default QuestProgressBar;","C:\\Users\\Gavin\\Desktop\\2021CODE\\2ndMonitorRpg\\client\\src\\screens\\LoadingScreen\\LoadingScreen.js",["140"],"// React and CSS\r\nimport React, { useEffect } from 'react';\r\nimport axios from \"axios\";\r\nimport './LoadingScreen.css';\r\n\r\n// Redux\r\nimport { useDispatch } from 'react-redux';\r\nimport { \r\n\tnavigate,\r\n\tupdateAllCurrencies,\r\n\tupdateAllMaterials,\r\n\tupdateHeroQuest,\r\n\tupdateAllItems,\r\n\tupdateAllStats,\r\n\tupdateAllTokens,\r\n } from '../../store/actions/actions';\r\n\r\n // Constants\r\n import Tokens from \"../../constants/Tokens\";\r\n\r\nconst LoadingScreen = props => {\r\n\r\n\t// Redux\r\n\tconst dispatch = useDispatch();\r\n\r\n\tuseEffect(() => {\r\n\t\tconst async = async () => {\r\n\t\t\taxios.all([\r\n\t\t\t\taxios.get(\"/api/getMaterials/1\"),\r\n\t\t\t\taxios.get(\"/api/getQuests/1\"),\r\n\t\t\t\taxios.get(\"/api/getItems/1\"),\r\n\t\t\t\taxios.get(\"/api/getTokens/1\"),\r\n\t\t\t]).then(axios.spread((materialsRes, questsRes, itemsRes, tokensRes) => {\r\n\t\t\t\t// Currencies\r\n\t\t\t\tlet currencyObj = {};\r\n\t\t\t\tmaterialsRes.data.filter(mat => mat.curr === 1).forEach(mat => {\r\n\t\t\t\t\tcurrencyObj = {...currencyObj, [mat.mat]: {...mat}};\r\n\t\t\t\t});\r\n\t\t\t\tdispatch(updateAllCurrencies(currencyObj));\r\n\r\n\t\t\t\t// Materials\r\n\t\t\t\tlet materialObj = {};\r\n\t\t\t\tmaterialsRes.data.filter(mat => mat.curr === 0).forEach(mat => {\r\n\t\t\t\t\tmaterialObj = {...materialObj, [mat.mat]: {...mat}};\r\n\t\t\t\t});\r\n\t\t\t\tdispatch(updateAllMaterials(materialObj));\r\n\r\n\t\t\t\t// Items\r\n\t\t\t\tlet itemObj = {};\r\n\t\t\t\tlet speed = 0;\r\n\t\t\t\tlet power = 0;\r\n\t\t\t\tlet luck = 0;\r\n\t\t\t\tlet wisdom = 0;\r\n\t\t\t\titemsRes.data.forEach(item => {\r\n\t\t\t\t\tif (item.speed > 0) speed = speed + item.speed;\r\n\t\t\t\t\tif (item.power > 0) power = power + item.power;\r\n\t\t\t\t\tif (item.luck > 0) luck = luck + item.luck;\r\n\t\t\t\t\tif (item.wisdom > 0) wisdom = wisdom + item.wisdom;\r\n\t\t\t\t\titemObj = {...itemObj, [item.name]: {...item}};\r\n\t\t\t\t});\r\n\t\t\t\tdispatch(updateAllItems(itemObj));\r\n\t\t\t\tdispatch(updateAllStats({speed: speed, power: power, luck: luck, wisdom: wisdom}));\r\n\r\n\t\t\t\t// Tokens\r\n\t\t\t\tlet tokenObj = {\r\n\t\t\t\t\tgold: {name: Tokens.gold.name, qty: tokensRes.data[0].gold, img_url: Tokens.gold.img_url},\r\n\t\t\t\t\tdiamond: {name: Tokens.diamond.name, qty: tokensRes.data[0].diamond, img_url: Tokens.diamond.img_url},\r\n\t\t\t\t\tticket: {name: Tokens.ticket.name, qty: tokensRes.data[0].ticket, img_url: Tokens.ticket.img_url},\r\n\t\t\t\t\tfastForward: {name: Tokens.fastForward.name, qty: tokensRes.data[0].fastForward, img_url: Tokens.fastForward.img_url},\r\n\t\t\t\t};\r\n\t\t\t\tdispatch(updateAllTokens(tokenObj));\r\n\r\n\t\t\t\t// Quests\r\n\t\t\t\tdispatch(updateHeroQuest(questsRes.data.filter(ele => ele.isHeroQuest === 1)));\r\n\r\n\t\t\t\t// Navigate home\r\n\t\t\t\tdispatch(navigate(\"Home\"));\r\n\t\t\t})).catch(error => {\r\n\t\t\t\tconsole.log(\"Error in LoadingScreen:\", error);\r\n\t\t\t});\r\n\t\t};\r\n\r\n\t\tasync();\r\n\t}, []);\r\n\r\n\t// COMP\r\n\treturn <div className='loadingScreen'></div>\r\n};\r\n\r\nexport default LoadingScreen;","C:\\Users\\Gavin\\Desktop\\2021CODE\\2ndMonitorRpg\\client\\src\\componenets\\questCards\\HeroQuestContainer\\HeroQuestContainer.js",["141"],"C:\\Users\\Gavin\\Desktop\\2021CODE\\2ndMonitorRpg\\client\\src\\constants\\Functions.js",[],"C:\\Users\\Gavin\\Desktop\\2021CODE\\2ndMonitorRpg\\client\\src\\componenets\\Sidebar\\SidebarItem.js",["142"],"// React and CSS\r\nimport React, { useState, useEffect } from 'react';\r\nimport './Sidebar.css';\r\n\r\nconst SidebarItem = props => {\r\n\tconst [hover, setHover] = useState(false);\r\n\tconst [percent, setPercent] = useState(50);\r\n\tconst [statsObj, setStatsObj] = useState({});\r\n\r\n\tuseEffect(() => {\r\n\t\tlet newStatsObj = {};\r\n\t\tprops.stats.forEach((stat, i) => {\r\n\t\t\tif (stat > 0) {\r\n\t\t\t\tlet name = \"x\";\r\n\t\t\t\tswitch (i) {\r\n\t\t\t\t\tcase 0:\r\n\t\t\t\t\t\tname = \"Speed\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 1: \r\n\t\t\t\t\t\tname = \"Power\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 2: \r\n\t\t\t\t\t\tname = \"Luck\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 3: \r\n\t\t\t\t\t\tname = \"Wisdom\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault: break;\r\n\t\t\t\t};\r\n\r\n\t\t\t\tnewStatsObj = {...newStatsObj, [name]: {name: name, value: stat}};\r\n\t\t\t};\r\n\t\t\tsetStatsObj(newStatsObj);\r\n\t\t});\r\n\t}, [props]);\r\n\t\r\n\treturn (\r\n\t\t<div className={`flex-full flex-col flex-jc-sb w100 sidebarItem`}\r\n\t\t\tonMouseEnter={() => { setHover(true) }}\r\n\t\t\tonMouseLeave={() => { setHover(false) }}\r\n\t\t\tstyle={{backgroundImage: `url(${props.img_url})`}}>\r\n\t\t\t\r\n\t\t\t{/* Name and level */}\r\n\t\t\t<div className={`flex-full flex-row flex-jc-sb flex-ai-fs w100 sidebarItem__info`}>\r\n\t\t\t\t<p className={`sidebarItem__name`}>{props.name}</p>\r\n\t\t\t\t<p className={`w100 sidebarItem__level`}>{props.level}</p>\r\n\t\t\t</div>\r\n\r\n\t\t\t{/* Progress bar */}\r\n\t\t\t<div class={`flex-full flex-jc-fs w100 sidebarItem__progressContainer`}>\r\n\t\t\t\t<div \r\n\t\t\t\t\tclassName={`sidebarItem__fill`} \r\n\t\t\t\t\tstyle={{ \r\n\t\t\t\t\t\twidth: `${percent}%`,\r\n\t\t\t\t\t\tbackgroundColor: percent >= 100 ? \"#0fca18\" : \"red\"\r\n\t\t\t\t\t}}\r\n\t\t\t\t></div>\r\n\t\t\t</div>\r\n\r\n\t\t\t{/* Hover */}\r\n\t\t\t<div className={`flex-full flex-col sidebarItem__hidden`}\r\n\t\t\t\tstyle={{ display: hover ? \"block\" : \"none\" }}>\r\n\t\t\t\t<div className={`sidebarItem__hidden--triangle`}></div>\r\n\r\n\t\t\t\t<div className={`flex-full flex-row flex-jc-sb w100 sidebarItem__hidden--infoGroup`}>\r\n\t\t\t\t\t<p className={`sidebarItem__hidden--title`}>{props.name}</p>\r\n\t\t\t\t\t<p className={`sidebarItem__hidden--title`}>{props.level}</p>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t{statsObj && Object.keys(statsObj).map(stat => {\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<div className={`flex-full flex-row flex-jc-sb sidebarItem__stat`} key={statsObj[stat].name}>\r\n\t\t\t\t\t\t\t<p className={`flex-full sidebarItem__stat--name`}>{statsObj[stat].name}</p>\r\n\t\t\t\t\t\t\t<p className={`flex-full sidebarItem__stat--value`}>{statsObj[stat].value}</p>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t);\r\n\t\t\t\t})}\r\n\r\n\t\t\t</div>\t\t\t\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default SidebarItem;","C:\\Users\\Gavin\\Desktop\\2021CODE\\2ndMonitorRpg\\client\\src\\constants\\Tokens.js",[],{"ruleId":"143","replacedBy":"144"},{"ruleId":"145","replacedBy":"146"},{"ruleId":"143","replacedBy":"147"},{"ruleId":"145","replacedBy":"148"},{"ruleId":"149","severity":1,"message":"150","line":2,"column":17,"nodeType":"151","messageId":"152","endLine":2,"endColumn":25},{"ruleId":"143","replacedBy":"153"},{"ruleId":"145","replacedBy":"154"},{"ruleId":"149","severity":1,"message":"155","line":2,"column":17,"nodeType":"151","messageId":"152","endLine":2,"endColumn":26},{"ruleId":"149","severity":1,"message":"156","line":7,"column":10,"nodeType":"151","messageId":"152","endLine":7,"endColumn":18},{"ruleId":"149","severity":1,"message":"157","line":7,"column":20,"nodeType":"151","messageId":"152","endLine":7,"endColumn":34},{"ruleId":"149","severity":1,"message":"158","line":10,"column":8,"nodeType":"151","messageId":"152","endLine":10,"endColumn":17},{"ruleId":"149","severity":1,"message":"159","line":74,"column":8,"nodeType":"151","messageId":"152","endLine":74,"endColumn":16},{"ruleId":"149","severity":1,"message":"160","line":80,"column":8,"nodeType":"151","messageId":"152","endLine":80,"endColumn":20},{"ruleId":"143","replacedBy":"161"},{"ruleId":"145","replacedBy":"162"},{"ruleId":"143","replacedBy":"163"},{"ruleId":"145","replacedBy":"164"},{"ruleId":"149","severity":1,"message":"165","line":3,"column":8,"nodeType":"151","messageId":"152","endLine":3,"endColumn":13},{"ruleId":"149","severity":1,"message":"166","line":7,"column":23,"nodeType":"151","messageId":"152","endLine":7,"endColumn":34},{"ruleId":"167","severity":1,"message":"168","line":89,"column":5,"nodeType":"169","endLine":89,"endColumn":7,"suggestions":"170"},{"ruleId":"149","severity":1,"message":"171","line":118,"column":18,"nodeType":"151","messageId":"152","endLine":118,"endColumn":28},{"ruleId":"149","severity":1,"message":"172","line":119,"column":20,"nodeType":"151","messageId":"152","endLine":119,"endColumn":32},{"ruleId":"167","severity":1,"message":"173","line":137,"column":5,"nodeType":"169","endLine":137,"endColumn":7,"suggestions":"174"},{"ruleId":"167","severity":1,"message":"175","line":194,"column":5,"nodeType":"169","endLine":194,"endColumn":14,"suggestions":"176"},{"ruleId":"143","replacedBy":"177"},{"ruleId":"145","replacedBy":"178"},{"ruleId":"149","severity":1,"message":"155","line":2,"column":17,"nodeType":"151","messageId":"152","endLine":2,"endColumn":26},{"ruleId":"149","severity":1,"message":"165","line":3,"column":8,"nodeType":"151","messageId":"152","endLine":3,"endColumn":13},{"ruleId":"149","severity":1,"message":"172","line":31,"column":20,"nodeType":"151","messageId":"152","endLine":31,"endColumn":32},{"ruleId":"149","severity":1,"message":"171","line":32,"column":18,"nodeType":"151","messageId":"152","endLine":32,"endColumn":28},{"ruleId":"149","severity":1,"message":"179","line":33,"column":18,"nodeType":"151","messageId":"152","endLine":33,"endColumn":28},{"ruleId":"167","severity":1,"message":"180","line":46,"column":5,"nodeType":"169","endLine":46,"endColumn":7,"suggestions":"181"},{"ruleId":"167","severity":1,"message":"182","line":73,"column":5,"nodeType":"169","endLine":73,"endColumn":14,"suggestions":"183"},{"ruleId":"167","severity":1,"message":"184","line":84,"column":5,"nodeType":"169","endLine":84,"endColumn":7,"suggestions":"185"},{"ruleId":"149","severity":1,"message":"186","line":47,"column":8,"nodeType":"151","messageId":"152","endLine":47,"endColumn":17},{"ruleId":"149","severity":1,"message":"187","line":7,"column":18,"nodeType":"151","messageId":"152","endLine":7,"endColumn":28},"no-native-reassign",["188"],"no-negated-in-lhs",["189"],["188"],["189"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar",["188"],["189"],"'useEffect' is defined but never used.","'navigate' is defined but never used.","'updateAllStats' is defined but never used.","'Materials' is defined but never used.","'dispatch' is assigned a value but never used.","'heroQuestObj' is assigned a value but never used.",["188"],["189"],["188"],["189"],"'axios' is defined but never used.","'useSelector' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["190"],"'setExpTime' is assigned a value but never used.","'setStartTime' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'expTime' and 'startTime'. Either include them or remove the dependency array.",["191"],"React Hook useEffect has missing dependencies: 'currencyObj', 'dispatch', 'props.loot', 'rewardTicks', and 'rewards'. Either include them or remove the dependency array. You can also do a functional update 'setRewards(r => ...)' if you only need 'rewards' in the 'setRewards' call.",["192"],["188"],["189"],"'setLootObj' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'loop' and 'statsObj.speed'. Either include them or remove the dependency array.",["193"],"React Hook useEffect has missing dependencies: 'enabled' and 'rollForLoot'. Either include them or remove the dependency array.",["194"],"React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["195"],"'giveQuest' is assigned a value but never used.","'setPercent' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"196","fix":"197"},{"desc":"198","fix":"199"},{"desc":"200","fix":"201"},{"desc":"202","fix":"203"},{"desc":"204","fix":"205"},{"desc":"206","fix":"207"},"Update the dependencies array to be: [props]",{"range":"208","text":"209"},"Update the dependencies array to be: [expTime, startTime]",{"range":"210","text":"211"},"Update the dependencies array to be: [currencyObj, dispatch, percent, props.loot, rewardTicks, rewards]",{"range":"212","text":"213"},"Update the dependencies array to be: [loop, statsObj.speed]",{"range":"214","text":"215"},"Update the dependencies array to be: [enabled, percent, rollForLoot]",{"range":"216","text":"217"},"Update the dependencies array to be: [dispatch]",{"range":"218","text":"219"},[2566,2568],"[props]",[3813,3815],"[expTime, startTime]",[5453,5462],"[currencyObj, dispatch, percent, props.loot, rewardTicks, rewards]",[1285,1287],"[loop, statsObj.speed]",[1836,1845],"[enabled, percent, rollForLoot]",[2620,2622],"[dispatch]"]